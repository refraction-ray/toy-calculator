%{
#include <iostream>
#include <cmath>
#include "string.h"
#include "main.h"

double last;
using namespace std;
%}

%lex-param {int debug}
%parse-param {int debug}
%union {double a_number;}
%start lines
%token <a_number> number
%type <a_number> exp

%left  '+' '-'
%left  '*' '/'
%right	'^'
%nonassoc 'e'
%nonassoc '%'
%nonassoc '~'

%%

lines  : lines line
	   | line
	   ;
line   : exp '='           {last = $1;
                            DEBUG{cout<<"~ is saved as "<<last<<"\n";}
							cout<<"the result is "<<$1<<"\n";}
       ;
exp    : exp '+' exp  		{$$ = $1 + $3; DEBUG {cout<<$1<<'+'<<$3<<'='<<$$<<"\n";}}
	   | exp '-' exp		{$$ = $1 - $3; DEBUG {cout<<$1<<'-'<<$3<<'='<<$$<<"\n";}}
	   | exp '*' exp		{$$ = $1 * $3; DEBUG {cout<<$1<<'x'<<$3<<'='<<$$<<"\n";}}
	   | exp '/' exp		{$$ = $1 / $3; DEBUG {cout<<$1<<'/'<<$3<<'='<<$$<<"\n";}}
	   | exp '^' exp		{$$ = pow($1, $3); DEBUG {cout<<$1<<'^'<<$3<<'='<<$$<<"\n";}}
	   | exp 'e' exp        {$$ = $1 * pow(10, $3); DEBUG {cout<<$1<<'e'<<$3<<'='<<$$<<"\n";}}
	   | exp '%'			{$$ = $1/100.0;}
	   | '(' exp ')'		{$$ = $2;}
	   | number      		{$$ = $1;}
	   | '~'				{$$ = last; DEBUG {cout<<"use the result of last expr: "<<last<<"\n";}}
	   ;
%%

int main (int argc, char** argv) {
	if (argc == 1){
		cout<<"welcome! (compact mode)"<<"\n";
		return yyparse (0);
	}
	else if (argc == 2 and strncmp(argv[1], "-v", 2)==0) {
		cout<<"welcome! (verbose mode)"<<"\n";
		return yyparse (1);
	}
	else{
		cout<<"unknown command"<<"\n";
		exit(-1);
	}
	
}

int yyerror (int debug, char *s) {cerr<<s<<"\n"; return 1;};

